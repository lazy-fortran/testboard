name: Release on Tag

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-alpine-static:
    runs-on: ubuntu-latest
    name: Build static binary on Alpine

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build static binary in Alpine container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            alpine:latest \
            sh -c '
              set -e

              # Install build dependencies
              apk add --no-cache gfortran make curl wget git

              # Install fpm
              wget -q https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-linux-x86_64-gcc-12
              chmod +x fpm-0.12.0-linux-x86_64-gcc-12
              mv fpm-0.12.0-linux-x86_64-gcc-12 /usr/local/bin/fpm

              # Generate embedded templates
              make templates

              # Build with static linking
              fpm build --flag "-static -static-libgfortran -static-libgcc" --verbose

              # Verify the binary is static
              ldd build/gfortran_*/app/testboard 2>&1 | grep -q "not a dynamic executable" || {
                echo "Warning: Binary may not be fully static"
                ldd build/gfortran_*/app/testboard || true
              }

              # Copy binary to predictable location
              cp build/gfortran_*/app/testboard testboard-static

              # Test the binary runs
              ./testboard-static --help || echo "Binary help check completed"
            '

      - name: Generate checksum
        run: |
          sha256sum testboard-static > testboard-static.sha256

      - name: Create Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Extract version from tag
          VERSION="${{ github.ref_name }}"

          # Get Alpine version used
          ALPINE_VERSION=$(docker run --rm alpine:latest cat /etc/alpine-release)

          # Create release notes
          cat > release_notes.md << EOF
          # TestBoard ${VERSION}

          ## Static Binary for x86_64 Linux

          This release includes a fully static binary built on Alpine Linux (musl libc).

          **Build Information:**
          - Alpine Version: ${ALPINE_VERSION}
          - Compiler: gfortran (musl-based)
          - Linking: Static (libgfortran, libgcc, libm, libquadmath)

          **Download:**
          - Binary: \`testboard-static\`
          - Checksum: \`testboard-static.sha256\`

          **Usage:**
          \`\`\`bash
          # Download the binary
          curl -LO https://github.com/${{ github.repository }}/releases/download/${VERSION}/testboard-static

          # Verify checksum
          curl -LO https://github.com/${{ github.repository }}/releases/download/${VERSION}/testboard-static.sha256
          sha256sum -c testboard-static.sha256

          # Make executable and run
          chmod +x testboard-static
          ./testboard-static --help
          \`\`\`

          **Building from source:**
          \`\`\`bash
          git clone https://github.com/${{ github.repository }}.git
          cd testboard
          git checkout ${VERSION}
          make templates
          fpm build
          fpm run
          \`\`\`
          EOF

          # Create release with binary
          gh release create "${{ github.ref_name }}" \
            testboard-static \
            testboard-static.sha256 \
            --title "Release ${{ github.ref_name }}" \
            --notes-file release_notes.md

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: testboard-static-x86_64-linux
          path: |
            testboard-static
            testboard-static.sha256
